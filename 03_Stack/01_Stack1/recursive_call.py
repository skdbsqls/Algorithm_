# 1. 재귀 호출
# - 필요한 함수가 자신과 같은 경우 자신을 다시 호출하는 구조
# - 함수에서 실행해야 하는 작업의 특성에 따라 일반적인 호출 방식보다 재귀 호출 방식을 사용하여 함수를 만들면,
# - 프로그램의 크기를 줄이고 간단하게 작성할 수 있다.

# 2. 재귀 호출의 대표적인 예시 : Factorial
# - n에 대한 factorial : 1부터 n까지의 모든 자연수를 곱하여 구하는 연산
# - 마지막에 구한 하위값을 이용하여 상위값을 구하는 작업을 반복

# 3. 재귀 호출의 대표적인 예시 : 피보나치 수열
# - 0과 1로 시작하고 이전의 두 수의 합을 다음 항으로 하는 수열을 피보나치라고 한다.
# - 피보나치 수를 구하는 재귀함수


def fibo(n):
    global count
    count += 1

    if n < 2:
        return n
    else:
        return fibo(n - 1) + fibo(n - 2)


count = 0  # 함수가 호출이 몇 번 일어나는지 확인하기 위한 변수
print(fibo(10), count)  # 55 177

# [재귀 연습1] 모든 배열 원소에 접근하기
# 크기가 N인 배열 arr[i]에 접근하기


# [참고] 재귀함수의 기본 구조 function(현재, 목표), 즉 현재 상황과 목표 상황 두 개를 인자로 받는다...
def f(i, N):  # i는 배열의 인덱스, N은 배열의 크기
    if i == N:  # 중단조건
        return
    else:
        print(arr[i])
        f(i + 1, N)


arr = [1, 2, 3, 4, 5]
N = len(arr)

f(0, N)
'''
1
2
3
4
5
'''

# [재귀 연습2] 배열에 찾는 값이 있으면 1, 없으면 0을 리턴


def f(i, N, v): # v는 찾는 값
    if i == N:
        return 0
    elif arr[i] == v:
        return 1
    else:
        return f(i + 1, N, v)


arr = [1, 2, 3, 4, 5]
N = len(arr)
v = 3

print(f(0, N, v))  # 1