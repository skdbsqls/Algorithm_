# 백트래킹(Backtracking)
# : 해를 찾는 도중에 '막히면' (즉, 해가 아니면) 되돌아가서 다시 해를 찾아가는 기법
# - 백트래킹 기법은 최적화 문제와 결정 문제를 해결할 수 있다.
# - 결정 문제란? 문제의 조건을 만족하는 해가 존재하는지의 여부를 'yes' 또는 'no'가 답하는 문제
# - 예를 들어) 미로 찾기, n-Queen, Map coloring, 부분 집합의 합 문제 등...

# 백트래킹과 깊이우선탐색과의 차이
# - 어떤 노드에서 출발하는 경로가 해결책으로 이어질 것 같지 않으면 더 이상 그 경로를 따라가지 않음으로써 시도 횟수를 줄인다.
# - 깊이우선탐색이 모든 경로를 추적하는데 비해 백트래킹은 불필요한 경로를 조기에 차단한다.
# - 깊이우선탐색을 가하기에는 경우의 수가 너무나 많다.
# - 즉, N! 가지의 경우의 수를 가진 문제에 대해 깊이우선탐색을 가하면 당연히 처리 불가능한 문제이다.
# - 백트래킹 알고리즘을 적용하면 일반적으로 경우의 수가 줄어들지만 이 역시 최악의 경우에는 여전히 지수함수 시간을 요하므로 처리 불가능하다.

# 백트래킹 기법
# - 어떤 노드의 유망성을 점검한 후헤 유망하지 않다고 결정되면 그 노드의 부모로 되돌아가 다음 자식 노드로 간다.
# - 어떤 노드를 방문했을 때 그 노드를 포함한 경로가 해답이 될 수 없으면 그 노드는 유망하지 않다고 하며,
# - 반대로 해답의 가능성이 있으면 유망하다고 한다.
# - 가지치기(pruning) : 유망하지 않는 노드가 포함되는 경로는 더 이상 고려하지 않는다.

# 백트래킹 알고리즘 절차
# 1) 상태 공간 트리의 깊이 우선 검색을 실시한다.
# 2) 각 노드가 유망한지 점검한다.
# 3) 만일 그 노드가 유망하지 않으면, 그 노드의 부모 노드로 돌아가서 검색을 계속한다.

# 일반적인 백트래킹 알고리즘
# def checknode(v):  # node
#     if promising(v):
#         if there is a solution at v:
#             write the solution
#         else:
#             for u in each child of v:
#                 checknode(V)

# powerset
# : 어떤 집합의 공집합과 자기자신을 포함한 모든 부분집합을 말하며
# # 구하고자 하는 어떤 집합의 원소 개수가 n인 경우, 부분 집합의 개수는 2^n이다.

# 백트래킹 기법으로 powerset을 만들어 보자.
# - 앞에서 설명한 일반적인 백트래킹 접근 방법을 이용한다.
# - n개의 원소가 들어 있는 집합의 2^n개의 부분 집합을 만들 때는 true 또는 fasle값을 가지는 항목들로 구성된 n개의 배열을 만다는 방법을 이용한다.
# - 여기서 배열의 i번째 항목은 i번째의 원소가 부분집합의 값인지 아닌지를 나타내는 값이다.