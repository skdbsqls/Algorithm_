1. 이진 트리
    - 모든 노드들이 2개 이내의 서브 트리를 갖는 특별한 형태의 트리
    - 각 노드가 자식 노드를 최대한 2개까지만 가질 수 있는 트리
        - 왼쪽 자식 노드(left child node)
        - 오른쪽 자식 노드(right chile node)

2. 이진 트리의 특성
    - 레벨 i 에서의 노드의 최대 개수는 2^i 개
    - 높이가 h인 이진 트리가 가질 수 있는 노드의 최소 개수는 h+1 개가 되며,
    - 최대 개수는 2^(h+1)-1 개 이다.

3. 포화 이진 트리(Full Binary Tree)
    - 모든 레벨에 노드가 포화상태로 차 있는 이진 트리
    - 높이가 h일 때, 최대의 노드 개수인 2^(h+1)-1 의 노드를 가진 이진 트리
    - 루트를 1번으로 하여 2^(h+1)-1 까지 정해진 위치에 대한 노드 번호를 가진다.

4. 완전 이진 트리(Complete Binary Tree)
    - 높이가 h이고 노드 수가 n개일 때, 포화 이진 트리의 노드 번호 1번부터 n번까지 빈 자리가 없는 이진트리

5. 편향 이진 트리(Skewed Binary Tree)
    - 높이 h에 대한 최소 개수의 노드를 가지면서 한쪽 방향의 자식 노드만을 가진 이진 트리
        - 왼쪽 편향 이진 트리
        - 오른쪽 편향 이진 트리

----------------------------------------------------------------------------------------------

1. 배열을 이용한 이진 트리의 표현 (단, 루트 노드를 1, 루트 노드의 레벨을 0이라 했을 때)
    - 포화 이진 트리, 완전 이진 트리에 적합!
    - 노드 번호를 배열의 인덱스로 사용한다.
    - 높이가 h인 이진 트리를 위한 배열의 크기? 2 ** (h + 1) - 1

    - 노드 번호가 i인 노드의 부모 노드 번호? i // 2
    - 노드 번호가 i인 노드의 왼쪽 자식 노드 번호? i * 2
    - 노드 번호가 i인 노드의 오른쪽 자식 노드 번호? i * 2 + 1
    - 레벨 n의 노드 번호 시작 번호? 2 ** n

    배열을 이용한 이진 트리 표현의 단점
    - 편향 이진 트리의 경우, 사용하지 않는 배열 원소에 대한 메모리 공간 낭비 발생
    - 트리의 중간에 새로운 노드를 삽입하거나 기존의 노드를 삭제할 경우 배열의 크기 변경이 어려워 비효율적

2. 이진 트리의 저장
    * 트리 자료 구조 특성 상, 정점의 개수 = 간선의 개수 + 1

    1) 부모 번호를 인덱스로 [자식 번호]를 저장
    - 순회를 할 때에는 부모 번호를 인덱스로 자식 번호를 저장

    2) 자식 번호를 인덱스로 부모 번호를 저장
    - 노드 번호가 i인 노드의 조상 목록을 찾을 수 있음
    - 루트 노드를 알 수 없을 때, 루트 노드를 찾을 수 있음

2. 연결 리스트를 이용한 이진 트리의 표현
    - 배열을 이용한 이진 트리 표현의 단점을 보완하기 위해 연결리스트를 이용하여 트리를 표현할 수 있음
    - 이진 트리의 모든 노드는 최대 2개의 자식 노드를 가지므로 일정한 구조의 단순 연결 리스트 노드를 사용하여 구현

3. 수식 트리
    - 수식을 표현하는 이진 트리
    - 수식 이진 트리(Expression Binary Tree)라고 부르기도 함
    - 연한자는 루트 노드이거나 가지 노드
    - 피연산자는 모두 잎 노드

    중위 순회는 중위 표기법
    후위 순회는 후위 표기법
    전위 순회는 전위 표기법