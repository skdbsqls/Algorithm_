[비트와 바이트]
- 1 bit : 0과 1을 표현하는 정보의 단위
- 1 Byte : 8-bit를 묶어 1 Btye라고 한다.

[비트 연산]
- 컴퓨터의 CPU는 0과 1로 다루어 동작되며,
- 내부적으로 비트 연산을 사용하여 덧셈, 뺄셈, 곱셈 등을 계산한다.

[비트연산 챕터의 목적]
- 사람이 사용하는 사칙연산(+, *, /, -)이 아닌 컴퓨터가 사용하는 연산인 '비트연산'을 이해해보자!
- 더 나아가, 프로그래밍에서 비트연산을 활용한 코딩 방법을 익혀보자.

[AND와 OR 비트연산자 이해하기]
- a AND b : a, b 둘다 1일때만 결과가 1, 그 외에는 0
- a OR b : a, b 둘 중 하나만 1이면 결과가 1, 그 외에는 0

[XOR와 NOT 연산자]
- ^ : XOR 연산자, OR 처럼 동작되는데 둘다 1인 경우는 0이다.
- 즉, 같으면 0, 다르면 1
- 어떤 값이던 특정 수로 2회 XOR를 하면 원래 수로 돌아온다.
- ex) 7070 ^ 1004 = 6258, 6258 ^ 1004 = 7070

[비트 연산자]
- Left Shift '<<' : 특정 수 만큼 비트를 왼쪽으로 밀어낸다.
- 피연사자의 비트 열을 왼쪽으로 이동시킨다. (왼쪽으로 밀어낼 곳이 없으면 오른쪽에 0이 추가된다.)
- Right Shift '>>' : 특정 수 만큼 비트를 오른쪽으로 밀어낸다.
- 피연산자의 비트 열을 오른쪽으로 이동시킨다. (오른쪽으로 밀어낼 곳이 없으면 우측 비트들이 제거된다.)

[비트 연산 응용] 1
- 1 << n : 2^n의 값을 갖음, 임베디드 분야에서 계산을 빠르게 하기 위해 사용된다.

[비트 연산 응용] 2
- i & (1 << n) : i의 n번째 비트가 1인지 아닌지를 확인할 수 있다.
- ex) 1011 & (1 << 2)
- 1011에서 2번 bit가 1인지 확인 가능하다.
- 결괏값이 0보다 크면 n번째 비트는 1임이 확정된다.

[음수 표현 방법]
- 컴퓨터는 음수를 '2의 보수'로 관리한다.
- 맨 앞자리 bit(MSB)는 음수 또는 양수를 구분하는 비트이다.
- 컴퓨터가 2의 보수를 사용하여 음수를 관리하는 이유는?
- 뺄셈의 연산 속도를 올릴 수 있으며, +0과 -0을 따로 취급하지 않기 위해 사용한다.

[신기한 2의 보수]
- 2의 보수를 취한 수를, 한 번 더 2의 보수를 취하면 원래의 값으로 돌아온다.

[bitwise Not(complement) 연산자
- ~ 연산자 : 모든 비트를 반전시킨다.
- ex) 파이썬이 ~4를 -5로 출력하는 과정
    1. 4는 0b0100 (세번째 0은 부호 비트, 양수이므로 0)
    2. NOT 연산자로 뒤집으면 1011
    3. MSB는 1이 되었고(음수), 나머지 bit는 011
    4. 나머지 bit에 대해 2의 보수를 취하면 100 + 1 = 101 이므로 5
    5. 따라서 -5

