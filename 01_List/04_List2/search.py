# * 검색(Search)이란? 저장되어 있는 자료 중에서 원하는 항목을 찾는 작업
# : 목적하는 탐색 키를 가진 항목을 찾는 것, 탐색 키란? 자료를 구별하여 인식할 수 있는 키

# 1) 순차 검색(Sequential Search)
# : 일렬로 되어 있는 자료를 순서대로 검색하는 방법
# - 가장 간단하고 직관적인 검색 방법
# - 배열이나 연결 리스트 등 순차구조로 구현된 자료구조에서 원하는 항목을 찾을 때 유용함
# - 알고리즘이 단순하여 구현이 쉽지만, 검색 대상의 수가 많은 경우에는 수행시간이 급격히 증가하여 비효율적임

# 1-2) 정렬되어 있지 않은 경우
#  * 검색 과정
# = 첫 번째 원소부터 순서대로 검색 대상과 키 값이 같인 원소가 있는지 비교하며 찾는다.
# - 키 값이 동일한 원소를 찾으면 그 원소의 인덱스를 반환한다.
# - 자료구조의 마지막에 이를 때까지 검색 대상을 찾지 못하면 검색 실패
# -> 찾고자 하는 원소의 순서에 따라 비교회수가 결정됨
# -> 시간 복잡도 : O(n)

# 1-3) 정렬되어 있지 않은 경우
# * 구현
def seq_search1(arr, N, key):
    for i in range(N):
        if arr[i] == key:
            return i
    return -1


arr = [4, 9, 11, 23, 2, 19, 7]
print(seq_search1(arr, len(arr), 11))  # 2


def seq_search1(arr, N, key):
    for i in range(N):
        for j in range(N):
            if arr[i][j] == key:
                return 1  # key를 찾은 경우
    return 0


arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
N = 3
key = 5
print(seq_search1(arr, N, key))  # 1

# 1-4) 정렬되어 있는 경우
#  * 검색 과정
# - 자료가 오름차순으로 정렬된 상태에서 검색을 실시한다고 가정하자.
# - 자료를 순차적으로 검색하면서 키 값을 비교하여, 원소의 키 값이 검색 대상의 키 값보다 크면 찾는 원소가 없다는 것이므로
#   더 이상 검색하지 않고 검색을 종료한다.
# -> 찾고자 하는 원소의 순서에 따라 비교회수가 결정됨
# -> 정렬이 되어 있으므로, 검색 실패를 반환하는 경우 평균 비교 회수가 반으로 줄어든다.
# -> 시간 복잡도 : O(n)

# 1-5) 정렬되어 있는 경우
# * 구현
def seq_search2(arr, N, key):
    for i in range(N):
        if arr[i] == key:
            return i
        elif arr[i] > key:
            return -1
    return -1  # 모든 원소가 key보다 작으면


arr = [4, 9, 11, 23, 2, 19, 7]
arr.sort()
print(seq_search2(arr, len(arr), 11))  # 4
print(seq_search2(arr, len(arr), 110))  # -1

# 2) 이진 검색(Binary Search)
# : 자료의 가운데에 있는 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속 진행하는 방법
# - 목적 키를 찾을 때까지 이진 검색을 순환적으로 반복 수행함으로써
# - 검색 범위를 반으로 줄여가면서 보다 빠르게 검색을 수행함
# ** 이진 검색을 하기 위해서는 자료가 정렬된 상태여야 한다.

# 2-1) 검색 과정
# - 자료의 중앙에 있는 원소를 고른다.
# - 중앙 원소의 값과 찾고자 하는 목표 값을 비교한다.
# - 목표 값이 중앙 원소의 값보다 작으면, 자료의 왼쪽 반에 대해서 새로 검색을 수행하고,
# - 목표 값이 중앙 원소의 값보다 크면, 자료의 오른쪽 반에 대해서 새로 검색을 수행한다.
# - 찾고자 하는 값을 찾을 때까지 반복한다.

# 2-2) 구현
# - 검색의 시작점과 종료점을 이용하여 검색을 반복 수행한다.
# - 이진 검색의 경우, 자료에 삽입이나 삭제가 발생했을 때 배열의 상태를 항상 정렬 상태로 유지하는 추가 작업이 필요하다.
def binary_search(arr, N, key):
    # 검색 구간 설정
    start = 0
    end = N - 1

    # 검색 구간에 1개 이상의 원소가 있으면 검색 수행
    while start <= end:
        # 중앙 원소의 값(기준 위치 찾기)
        middle = (start + end) // 2

        # 검색 성공
        if arr[middle] == key:
            return middle
        # 찾는 값보다 크면, 왼쪽 구간 선택
        elif arr[middle] > key:
            end = middle - 1
        # 차는 값보다 작으면, 오른쪽 구간 선택
        else:
            start = middle + 1
    # 검색 실패
    return -1


arr = [2, 4, 7, 9, 11, 19, 23]  # 오름차순 정렬된 배열
print(binary_search(arr, len(arr), 7))  # 2
print(binary_search(arr, len(arr), 20))  # -1

# 3) 인덱스
# - 인덱스라는 용어는 Database에서 유래했으며, 테이블에 대한 동작 속도를 높여주는 자료 구조를 일컫는다.
# - Database 분야가 아닌 곳에서는 Look up table 등의 용어를 사용하기도 한다.
# - 인덱스를 저장하는데 필요한 디스크 공간은 보통 테이블을 저장하는데 필요한 디스크 공간보다 작다.
# - 왜냐하면 보통 인덱스는 키-필드만 갖고 있고, 테이블의 다른 세부 항목들은 갖고 있지 않기 때문이다.
# - 대량의 데이터를 매번 정렬하면, 프로그램의 반응은 느려질 수 밖에 없다.
# -> 이러한 대량 데이터의 성능 저하 문제를 해결하기 위해 배열 인덱스를 사용할 수 있다.
# -> 데이터베이스 인덱스는 이진 탐색 트리 구조로 되어있다.
